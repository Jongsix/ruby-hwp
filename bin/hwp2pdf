#!/usr/bin/ruby1.9.1
# coding: utf-8
# apt-get install libole-ruby or gem install ruby-ole
# 한글과컴퓨터의 글 문서 파일(.hwp) 공개 문서를 참고하여 개발하였습니다.

require 'optparse'

begin
    require 'hwp'
rescue Exception
    $LOAD_PATH << File.expand_path(File.dirname(__FILE__)) + '/../lib'
    require 'hwp'
end

require 'pango'
require 'cairo'

opts = {}
op = OptionParser.new do |op|
	#op.banner = "Usage: hwp2txt [OPTION] [FILE]"
	op.banner = "Usage: hwp2pdf [OPTION] [FILE]"
	op.separator ' '
	#op.separator "Output control:"
	op.on('-o', '--output=FILE', 'output file') { opts[:action] = :output }
	#op.separator ''
	op.on_tail('-h', '--help', 'Show this message') { puts op; exit }
end

files = op.parse ARGV

if files.empty?
	puts 'Must specify 1 .hwp file.'
	puts op
	exit 1
end

def print_para_headers(obj, context, layout, doc)
    # mm 를 cairo point 로 변환
    @x ||= @page_def.left_margin / 100.0

    obj.para_headers.each do |para_header|
        para_shape = doc.doc_info.para_shapes[para_header.para_shape_id]

        @x += para_shape.left * 72.0 / 25.4 if para_shape
        @y ||= (@page_def.top_margin + @page_def.header_margin) / 100.0
        @y = @y + layout.pixel_size[1]
        layout.text = para_header.para_texts[0].to_s
        context.move_to @x, @y
        context.show_pango_layout layout
        if @y > (@page_def.height - @page_def.bottom_margin - @page_def.footer_margin) / 100.0
            context.show_page
            @y = (@page_def.top_margin + @page_def.header_margin) / 100.0
        end
        ##########
        @x -= para_shape.left * 72.0 / 25.4 if para_shape

        para_header.ctrl_headers.each do |ctrl_header|
            # 재귀
            print_para_headers(ctrl_header, context, layout, doc)
        end
    end
end

doc = HWP.open files[0]
    # PAGE SIZE
    # 1 point = size[mm] * 72.0 / 25.4
    # 1 mm =    size[point] / 72.0 * 25.4
    # Letter        612 * 792
    # LetterSmall   612 * 792
    # Tabloid       792 * 1224
    # Ledger       1224 * 792
    # Legal         612 * 1008
    # Statement     396 * 612
    # Executive     540 * 720
    # A0           2384 * 3371
    # A1           1685 * 2384
    # A2           1190 * 1684
    # A3            842 * 1190
    # A4            595 * 842
    # A4Small       595 * 842
    # A5            420 * 595
    # B4            729 * 1032
    # B5            516 * 729
    # Envelope      ??? * ???
    # Folio         612 * 936
    # Quarto        610 * 780
    # 10x14         720 * 1008
    require 'pp'
    section_def = doc.body_text.para_headers[0].ctrl_headers[0].section_defs[0]
    @page_def = section_def.page_defs[0]

    surface = Cairo::PDFSurface.new("/tmp/out.pdf",
        @page_def.width  / 100.0, @page_def.height / 100.0)

    p @page_def.left_margin # 10 pt = 1000 hwpuint
    p @page_def.right_margin
    p @page_def.top_margin
    p @page_def.bottom_margin
    p @page_def.header_margin
    p @page_def.footer_margin

    context = Cairo::Context.new(surface)
    context.move_to(
        @page_def.left_margin / 100.0,
        (@page_def.top_margin + @page_def.header_margin) / 100.0)
    layout = context.create_pango_layout
    layout.width = (@page_def.width - @page_def.left_margin - @page_def.right_margin) / 100.0 * Pango::SCALE
    layout.wrap = Pango::WRAP_WORD_CHAR
    layout.alignment = Pango::ALIGN_LEFT

    print_para_headers(doc.body_text, context, layout, doc)

    context.show_page
    surface.finish
doc.close

`evince /tmp/out.pdf`

__END__

require 'gtk2'
require 'cairo'
require 'hwp'

page = Hwp::Page.new

def on_expose(surface)
    cr = Cairo::Context.new(surface)
    Hwp.page_render(page, cr)
    cr.destroy
end

doc = Hwp::Document.new file
page = doc.get_page(0)
n_pages = doc.get_n_pages(doc)

win = Gtk::Window.new
win.signal_connect("destroy") { Gtk.main_quit }
win.signal_connect("expose")  { on_expose }
win.show_all

Gtk.main
